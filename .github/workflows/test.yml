name: InfluxDB Sync Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24.3"

jobs:
  # 快速检查：代码质量和构建
  quality:
    name: Code Quality & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download Go dependencies
        run: go mod download

      - name: Run Go vet
        run: go vet ./...

      - name: Run Go tests (unit tests)
        run: go test -v ./...

      - name: Build project
        run: go build -v -o influxdb-sync ./...

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: influxdb-sync-binary
          path: influxdb-sync
          retention-days: 1

  # 集成测试：并行运行所有同步模式测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        sync-mode: ["1x-1x", "1x-2x", "2x-2x"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Download Go dependencies
        run: go mod download

      - name: Free up disk space
        run: |
          docker system prune -f
          df -h

      - name: Test ${{ matrix.sync-mode }} sync
        run: |
          echo "🚀 开始测试 ${{ matrix.sync-mode }} 同步模式"
          task test-${{ matrix.sync-mode }}
          echo "✅ ${{ matrix.sync-mode }} 测试完成"

      - name: Cleanup Docker containers
        if: always()
        run: |
          docker ps -a
          docker-compose -f deployments/docker-compose-${{ matrix.sync-mode }}.yml down --volumes --remove-orphans || true
          docker system prune -f

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.sync-mode }}
          path: |
            *.log
            resume.state
            docker-compose*.yml
          retention-days: 7

  # 测试结果汇总
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quality, integration-test]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "代码质量检查: ${{ needs.quality.result }}"
          echo "集成测试结果: ${{ needs.integration-test.result }}"

          if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "🎉 所有测试通过！"
            exit 0
          else
            echo "❌ 测试失败，请检查日志"
            exit 1
          fi
