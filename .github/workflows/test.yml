name: InfluxDB Sync Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  GO_VERSION: "1.24.3"

jobs:
  # 快速检查：代码质量和构建
  quality:
    name: Code Quality & Build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Check Docker environment
        run: |
          echo "=== Docker version ==="
          docker --version
          echo "=== Docker Compose version ==="
          docker compose version || echo "docker compose not available"
          echo "=== docker-compose version ==="
          docker-compose --version || echo "docker-compose not available"

      - name: Set up GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          install-only: true

      - name: Run CI quality checks
        env:
          USE_DOCKER: true
        run: task ci-quality

      - name: Upload binary artifact
        uses: actions/upload-artifact@v4
        with:
          name: influxdb-sync-binary
          path: influxdb-sync
          retention-days: 1

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage.out
            coverage.html
          retention-days: 30

  # 集成测试：并行运行所有同步模式测试
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: quality
    strategy:
      fail-fast: false
      matrix:
        sync_mode: ["1x-1x", "1x-2x", "2x-2x"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ matrix.sync_mode }}-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-${{ matrix.sync_mode }}-
            ${{ runner.os }}-go-${{ env.GO_VERSION }}-
            ${{ runner.os }}-go-

      - name: Install Task
        run: |
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b /usr/local/bin

      - name: Check Docker environment
        run: |
          echo "=== Docker version ==="
          docker --version
          echo "=== Docker Compose version ==="
          docker compose version || echo "docker compose not available"
          echo "=== docker-compose version ==="
          docker-compose --version || echo "docker-compose not available"

      - name: Download Go dependencies
        run: task deps

      - name: Clean module cache on conflict
        if: failure()
        run: |
          go clean -modcache
          task deps

      - name: Free up disk space
        run: |
          docker system prune -f
          df -h

      - name: Test ${{ matrix.sync_mode }} sync
        env:
          SYNC_MODE: ${{ matrix.sync_mode }}
        run: |
          echo "🚀 开始测试 ${{ matrix.sync_mode }} 同步模式"
          task ci-integration
          echo "✅ ${{ matrix.sync_mode }} 测试完成"

      - name: Cleanup Docker containers
        if: always()
        run: |
          docker ps -a
          # 使用智能检测的 Docker Compose 命令
          DOCKER_COMPOSE_CMD="docker-compose"
          if ! command -v docker-compose >/dev/null 2>&1; then
            if docker compose version >/dev/null 2>&1; then
              DOCKER_COMPOSE_CMD="docker compose"
            fi
          fi
          $DOCKER_COMPOSE_CMD -f deployments/docker-compose-${{ matrix.sync_mode }}.yml down --volumes --remove-orphans || true
          docker system prune -f

      - name: Upload test artifacts on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.sync_mode }}
          path: |
            *.log
            resume.state
            docker-compose*.yml
          retention-days: 7

  # 测试结果汇总
  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [quality, integration-test]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "代码质量检查: ${{ needs.quality.result }}"
          echo "集成测试结果: ${{ needs.integration-test.result }}"

          if [[ "${{ needs.quality.result }}" == "success" && "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "🎉 所有测试通过！"
            exit 0
          else
            echo "❌ 测试失败，请检查日志"
            exit 1
          fi
